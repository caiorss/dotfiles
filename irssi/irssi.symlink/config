# See:
# http://quadpoint.org/articles/irssi/
# http://carina.org.uk/irssiconfig
# https://github.com/averi/config-files/blob/master/irssi/config
# http://pthree.org/2010/01/22/hilight_win-pl-for-irssi-and-other-script-goodies/
# http://blog.dale.id.au/archives/587
# https://github.com/msparks/irssiscripts
# http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=664603
#
# BitlBee:
# http://wiki.bitlbee.org/IrssiTips
# http://wiki.bitlbee.org/HowtoPurple
#
# Custom channel:
#   /join &gtalk
#   channel gtalk set fill_by account
#   channel gtalk set account 0

servers = (
  {
    address = "irc.freenode.net";
    chatnet = "Freenode";
    port = "7000";
    use_ssl = "yes";
    ssl_verify = "yes";
    autoconnect = "yes";
  },
  {
    address = "irc.mozilla.org";
    chatnet = "Mozilla";
    port = "6697";
    use_ssl = "yes";
    ssl_verify = "yes";
    autoconnect = "yes";
  },
  {
    address = "localhost";
    chatnet = "localhost";
    port = "6667";
    use_ssl = "no";
    ssl_verify = "no";
    autoconnect = "yes";
  }
);

chatnets = {
  Freenode = { type = "IRC"; };
  localhost = { type = "IRC"; };
  Mozilla = { type = "IRC"; };
};

channels = (
  { name = "#vim"; chatnet = "Freenode"; autojoin = "yes"; },
  { name = "#rubyonrails"; chatnet = "Freenode"; autojoin = "yes"; },
  { name = "#ruby-lang"; chatnet = "Freenode"; autojoin = "yes"; },
  { name = "#shitfire"; chatnet = "Freenode"; autojoin = "yes"; },
  { name = "#rust"; chatnet = "Mozilla"; autojoin = "yes"; },
  { name = "#raspberrypi"; chatnet = "Freenode"; autojoin = "yes"; }
);

aliases = {
  J = "join";
  WJOIN = "join -window";
  WQUERY = "query -window";
  LEAVE = "part";
  BYE = "quit";
  EXIT = "quit";
  SIGNOFF = "quit";
  DESCRIBE = "action";
  DATE = "time";
  HOST = "userhost";
  LAST = "lastlog";
  SAY = "msg *";
  WI = "whois";
  WII = "whois $0 $0";
  WW = "whowas";
  W = "who";
  N = "names";
  M = "msg";
  T = "topic";
  C = "clear";
  CL = "clear";
  K = "kick";
  KB = "kickban";
  KN = "knockout";
  BANS = "ban";
  B = "ban";
  MUB = "unban *";
  UB = "unban";
  IG = "ignore";
  UNIG = "unignore";
  SB = "scrollback";
  UMODE = "mode $N";
  # WC = "window close";
  # Closing the current window kills splits.
  # We can keep the splits by moving to the left and then closing the target window.
  WC = "WCC $winref";
  WCC = "window left; window close $0;";
  WN = "window new hide";
  SV = "say Irssi $J ($V) - http://irssi.org/";
  GOTO = "sb goto";
  CHAT = "dcc chat";
  RUN = "SCRIPT LOAD";
  CALC = "exec - if command -v bc >/dev/null 2>&1\\; then printf '%s=' '$*'\\; echo '$*' | bc -l\\; else echo bc was not found\\; fi";
  SBAR = "STATUSBAR";
  INVITELIST = "mode $C +I";
  Q = "QUERY";
  "MANUAL-WINDOWS" = "set use_status_window off;set autocreate_windows off;set autocreate_query_level none;set autoclose_windows off;set reuse_unused_windows on;save";
  EXEMPTLIST = "mode $C +e";
  ATAG = "WINDOW SERVER";
  UNSET = "set -clear";
  RESET = "set -default";
  QMSG = "quote privmsg $0 :$1-";
};

statusbar = {
  # formats:
  # when using {templates}, the template is shown only if it's argument isn't
  # empty unless no argument is given. for example {sb} is printed always,
  # but {sb $T} is printed only if $T isn't empty.

  items = {
    # start/end text in statusbars
    barstart = "{sbstart}";
    barend = "{sbend}";

    topicbarstart = "{topicsbstart}";
    topicbarend = "{topicsbend}";

    # treated "normally", you could change the time/user name to whatever
    time = "{sb $Z}";
    user = "{sb {sbnickmode $cumode}$N{sbmode $usermode}{sbaway $A}}";

    # treated specially .. window is printed with non-empty windows,
    # window_empty is printed with empty windows
    window = "{sb $winref:$tag/$itemname{sbmode $M}}";
    window_empty = "{sb $winref{sbservertag $tag}}";
    prompt = "{prompt $[.15]itemname}";
    prompt_empty = "{prompt $winname}";
    topic = " $topic";
    topic_empty = " Irssi v$J - http://www.irssi.org";

    # all of these treated specially, they're only displayed when needed
    lag = "{sb Lag: $0-}";
    act = "{sb Act: $0-}";
    more = "-- more --";
  };

  # there's two type of statusbars. root statusbars are either at the top
  # of the screen or at the bottom of the screen. window statusbars are at
  # the top/bottom of each split window in screen.
  default = {
    # the "default statusbar" to be displayed at the bottom of the window.
    # contains all the normal items.
    window = {
      disabled = "no";

      # window, root
      type = "window";
      # top, bottom
      placement = "bottom";
      # number
      position = "1";
      # active, inactive, always
      visible = "active";

      # list of items in statusbar in the display order
      items = {
        barstart = { priority = "100"; };
        time = { };
        user = { };
        window = { };
        window_empty = { };
        lag = { priority = "-1"; };
        # AWL makes act pointless
        #act = { priority = "10"; };
        inputlength = { };
        more = { priority = "-1"; alignment = "right"; };
        barend = { priority = "100"; alignment = "right"; };
        usercount = { };
      };
    };

    # statusbar to use in inactive split windows
    window_inact = {
      type = "window";
      placement = "bottom";
      position = "1";
      visible = "inactive";
      items = {
        barstart = { priority = "100"; };
        window = { };
        window_empty = { };
        more = { priority = "-1"; alignment = "right"; };
        barend = { priority = "100"; alignment = "right"; };
      };
    };

    # we treat input line as yet another statusbar :) It's possible to
    # add other items before or after the input line item.
    prompt = {
      type = "root";
      placement = "bottom";
      # we want to be at the bottom always
      position = "100";
      visible = "always";
      items = {
        prompt = { priority = "-1"; };
        prompt_empty = { priority = "-1"; };
        # treated specially, this is the real input line.
        input = { priority = "10"; };
      };
    };

    # topicbar
    topic = {
      type = "root";
      placement = "top";
      position = "1";
      visible = "always";
      items = {
        topicbarstart = { priority = "100"; };
        topic = { };
        topic_empty = { };
        topicbarend = { priority = "100"; alignment = "right"; };
      };
    };
    awl_0 = {
      items = {
        barstart = { priority = "100"; };
        awl_0 = { };
        barend = { priority = "100"; alignment = "right"; };
      };
    };
  };
};

settings = {
  core = {
    real_name = "Charles Strahan";
    user_name = "cstrahan";
    nick = "cstrahan";
  };
  "fe-text" = { actlist_sort = "refnum"; };
  "fe-common/core" = {
    theme = "xchat";
    # bell_beeps seems to cover the case where a beep is caused by a printed
    # message/format. It's unrelated to activity beeps.
    bell_beeps = "no";
    # beep_msg_level = "MSGS NOTICES DCC DCCMSGS HILIGHT";
    beep_msg_level = "HILIGHT";
    beep_when_away = "no";
    beep_when_window_active = "yes";
    autolog_path = "~/irclogs/$tag/%Y/${0}-%m-%d.log";
    autolog = "yes";
    # Disable automatic window closing when /PARTing channel or /UNQUERYing query:
    autoclose_windows = "no";
    reuse_unused_windows = "yes";
  };
  "perl/core/scripts" = {
    awl_display_key = "$Q%K|%n$H$C$S";
    inputlength_width = "3";
    inputlength_padding_char = "0";
    growl_on_regex = "cstrahan";
    growl_channel_regex = ".*";
    growl_icon = "irssi-white.png";
    queryresume_lines = "15";
  };
};

hilights = (
  { text = "charles"; nick = "no"; word = "yes"; },
  { text = "strahan"; nick = "no"; word = "yes"; },
  { text = "cstrahan"; nick = "no"; word = "yes"; }
);

windows = {
  1 = { immortal = "yes"; name = "(status)"; level = "ALL"; };
  99 = { name = "hilight"; sticky = "yes"; };
};

mainwindows = {
  1 = { first_line = "9"; lines = "55"; };
  99 = { first_line = "1"; lines = "8"; };
};

keyboard = (
  { key = "meta-[M"; id = "command"; data = "mouse_xterm "; },
  { key = "meta-y"; id = "command"; data = "window last"; }
);

ignores = (
  {
    network = "FreeNode";
    channels = ( "#shitfire", "#vim", "#rubyonrails", "ruby-lang" );
    level = "PARTS QUITS";
  },
  { network = "localhost"; channels = ( "&bitlbee" ); level = "MODES"; }
);

logs = { };
