" vim: set filetype=vim

let g:CSApprox_verbose_level=0


" Custom CommandT bindings
"let g:CommandTCancelMap     = ['<ESC>', '<C-c>']
"let g:CommandTSelectNextMap = ['<C-n>', '<C-j>', '<ESC>OB']
"let g:CommandTSelectPrevMap = ['<C-p>', '<C-k>', '<ESC>OA']

" Cursor shape
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" Default dirs
if has("win32") || has("win64")
  set backupdir+=$TMP
  set directory+=$TMP
else
  if exists("mkdir")
    call mkdir("~/tmp")
  end

  set backupdir=~/tmp//,/var/tmp//,/tmp//,.
  set directory=~/tmp//,/var/tmp//,/tmp//,.
end

if has("unix") && (!has("gui_running"))
  set ttymouse=xterm

  " Fix the ABCD problem when in insert mode
  imap 0A <ESC>ki
  imap 0B <ESC>ji
  imap 0C <ESC>li
  imap 0D <ESC>hi
end

" Aesthetics
if has("gui_running")
  call togglebg#map("<F5>")
  set background=light
  colorscheme solarized
else
  let g:solarized_termcolors=256
  colorscheme solarized
end

if has("gui_macvim") || has("gui_win32")
  set guifont=PragmataPro:h10
elseif has("gui_gtk")
  set guifont=PragmataPro\ 10
end


" https://wincent.com/blog/tweaking-command-t-and-vim-for-use-in-the-terminal-and-tmux
if has('mouse')
  set mouse=a
  if &term =~ "xterm" || &term =~ "screen"
    " for some reason, doing this directly with 'set ttymouse=xterm2'
    " doesn't work -- 'set ttymouse?' returns xterm2 but the mouse
    " makes tmux enter copy mode instead of selecting or scrolling
    " inside Vim -- but luckily, setting it up from within autocmds
    " works
    autocmd VimEnter * set ttymouse=xterm2
    autocmd FocusGained * set ttymouse=xterm2
    autocmd BufEnter * set ttymouse=xterm2
  endif
endif

" File types
set expandtab shiftwidth=2 softtabstop=2
autocmd FileType cs setlocal expandtab shiftwidth=4 softtabstop=4

" <leader>s to substitute word under cursor
nnoremap <Leader>s :%s/\<<C-r><C-w>\>//g<Left><Left>

" Haskell stuffs
let g:haskell_indent_if   = 0
let g:haskell_indent_case = 5

if has('win32') || has("win64")
  let g:haddock_browser = 'cmd.exe /c start ""'
  let g:haddock_browser_callformat = '%s %s'
elseif has("unix")
  let s:uname = system("uname")
  if s:uname == "Darwin\n"
    let g:haddock_browser = 'open'
    let g:haddock_browser_callformat = '%s %s'
  elseif s:uname == "Linux\n"
    let g:haddock_browser = 'xdg-open'
    let g:haddock_browser_callformat = '%s %s'
  endif
endif

" Easier navigation keys (ctrl + normal movement keys h,j,k,l)
nnoremap <silent> <C-h> :wincmd h<CR>
nnoremap <silent> <C-j> :wincmd j<CR>
nnoremap <silent> <C-k> :wincmd k<CR>
nnoremap <silent> <C-l> :wincmd l<CR>

" :p:h
fun! RangerChooser()
  try
    silent !ranger --choosefile=/tmp/chosenfile `[ -z '%' ] && echo -n . || dirname %`
  catch
    silent !ranger --choosefile=/tmp/chosenfile .
  endtry
  if filereadable('/tmp/chosenfile')
    exec 'edit ' . system('cat /tmp/chosenfile')
    call system('rm /tmp/chosenfile')
  endif
  redraw!
endfun
map ,r :call RangerChooser()<CR>
