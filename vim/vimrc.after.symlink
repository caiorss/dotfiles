" vim: set filetype=vim
"
" Clojure
autocmd FileType clojure setlocal lispwords+=testing,GET,PUT,POST
let vimclojure#FuzzyIndent = 1

let g:CSApprox_verbose_level=0

" Insert lambda with <C-l>
inoremap <silent> <C-l> <C-k>l*

" Custom CommandT bindings
"let g:CommandTCancelMap     = ['<ESC>', '<C-c>']
"let g:CommandTSelectNextMap = ['<C-n>', '<C-j>', '<ESC>OB']
"let g:CommandTSelectPrevMap = ['<C-p>', '<C-k>', '<ESC>OA']

" Highlght cursor and column width
set cursorline
set colorcolumn=80

" Cursor shape
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" Default dirs
if has("win32") || has("win64")
  set backupdir+=$TMP
  set directory+=$TMP
else
  if exists("mkdir")
    call mkdir("~/tmp")
  end

  set backupdir=~/tmp//,/var/tmp//,/tmp//,.
  set directory=~/tmp//,/var/tmp//,/tmp//,.
end

if has("unix") && (!has("gui_running"))
  set ttymouse=xterm

  " Fix the ABCD problem when in insert mode
  imap 0A <ESC>ki
  imap 0B <ESC>ji
  imap 0C <ESC>li
  imap 0D <ESC>hi
end

" Aesthetics
if has("gui_running")
  call togglebg#map("<F5>")
  set background=light
  colorscheme solarized
else
  let g:solarized_termcolors=256
  colorscheme solarized
end

if has("gui_macvim") || has("gui_win32")
  set guifont=PragmataPro:h10
elseif has("gui_gtk")
  set guifont=PragmataPro\ 10
end


" https://wincent.com/blog/tweaking-command-t-and-vim-for-use-in-the-terminal-and-tmux
if has('mouse')
  set mouse=a
  if &term =~ "xterm" || &term =~ "screen"
    " for some reason, doing this directly with 'set ttymouse=xterm2'
    " doesn't work -- 'set ttymouse?' returns xterm2 but the mouse
    " makes tmux enter copy mode instead of selecting or scrolling
    " inside Vim -- but luckily, setting it up from within autocmds
    " works
    autocmd VimEnter * set ttymouse=xterm2
    autocmd FocusGained * set ttymouse=xterm2
    autocmd BufEnter * set ttymouse=xterm2
  endif
endif

" File types
set expandtab shiftwidth=2 softtabstop=2
autocmd FileType cs setlocal expandtab shiftwidth=4 softtabstop=4
autocmd FileType php setlocal expandtab shiftwidth=4 softtabstop=4
autocmd FileType md setlocal expandtab shiftwidth=2 softtabstop=2
autocmd BufNewFile,BufRead composer.lock set filetype=javascript

" <leader>s to substitute word under cursor
nnoremap <Leader>s :%s/\<<C-r><C-w>\>//g<Left><Left>

" Haskell stuffs
let g:haskell_indent_if   = 0
let g:haskell_indent_case = 5

if has('win32') || has("win64")
  let g:haddock_browser = 'cmd.exe /c start ""'
  let g:haddock_browser_callformat = '%s %s'
elseif has("unix")
  let s:uname = system("uname")
  if s:uname == "Darwin\n"
    let g:haddock_browser = 'open'
    let g:haddock_browser_callformat = '%s %s'
  elseif s:uname == "Linux\n"
    let g:haddock_browser = 'xdg-open'
    let g:haddock_browser_callformat = '%s %s'
  endif
endif

" Easier navigation keys (ctrl + normal movement keys h,j,k,l)
nnoremap <silent> <C-h> :wincmd h<CR>
nnoremap <silent> <C-j> :wincmd j<CR>
nnoremap <silent> <C-k> :wincmd k<CR>
nnoremap <silent> <C-l> :wincmd l<CR>

fun! RangerChooser()
  try
    silent !ranger --choosefile=/tmp/chosenfile `[ -z '%' ] && echo -n . || dirname %`
  catch
    silent !ranger --choosefile=/tmp/chosenfile .
  endtry
  if filereadable('/tmp/chosenfile')
    exec 'edit ' . system('cat /tmp/chosenfile')
    call system('rm /tmp/chosenfile')
  endif
  redraw!
endfun
map <Leader>r :call RangerChooser()<CR>

" http://src.chuckg.org/rcfiles/src/6b15c9ad4d29/vimrc/.vimrc
" https://github.com/cdlm/infrastructure/blob/master/dotfiles/vim/after/plugin/tabular-patterns.vim
if exists(":Tabularize")
  function! CustomTabularPatterns()
      if exists('g:tabular_loaded')
          AddTabularPattern! assignment      / = /l0
          AddTabularPattern! chunks          / \S\+/l0
          AddTabularPattern! colon           /:\zs /l0
          AddTabularPattern! first_comma     /^[^,]*,/l1
          AddTabularPattern! comma           /,\zs /l0
          AddTabularPattern! first_hash      /^[^>]*\zs=>/
          AddTabularPattern! hash            / => \|,\zs /l0
          AddTabularPattern! options_hashes  /:\w\+ =>/
          AddTabularPattern! symbols         / :/l0
          AddTabularPattern! space           /^\s*\S*\zs\s/l0
      endif
  endfunction
  autocmd VimEnter * call CustomTabularPatterns()

  map <leader>a= :Tabularize assignment<CR>
  map <leader>a: :Tabularize colon<CR>
  map <leader>a, :Tabularize comma<CR>
  map <leader>a> :Tabularize hash<CR>
  map <leader>a<SPACE> :Tabularize chunks<CR>
endif

" Configure ctrlp
map <leader>gv :CtrlP app/views<cr>
map <leader>gc :CtrlP app/controllers<cr>
map <leader>gm :CtrlP app/models<cr>
map <leader>gh :CtrlP app/helpers<cr>
map <leader>gl :CtrlP lib<cr>
map <leader>gp :CtrlP public<cr>
map <leader>gs :CtrlP public/stylesheets/sass<cr>
map <leader>gf :CtrlP features<cr>
map <leader>gt :CtrlPTag<cr>
map <leader>gb :CtrlPBufTag<cr>
